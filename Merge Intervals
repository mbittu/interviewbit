bool compare(Interval a,Interval b)
{
    return a.start<b.start;
}
vector<Interval> Solution::insert(vector<Interval> &A, Interval newInterval) 
{
    A.push_back(newInterval);
    sort(A.begin(),A.end(),compare);
    int n=A.size();
    stack<Interval>s;
    s.push(A[0]);
    for(int i=1;i<n;i++)
    {
        Interval top=s.top();
        if(top.end<A[i].start)
            s.push(A[i]);
        else if(top.end<A[i].end)
        {
            top.end=A[i].end;
            s.pop();
            s.push(top);
        }
    }
    vector<Interval>ans;
    while(!s.empty())
    {
        ans.push_back(s.top());
        s.pop();
    }
    sort(ans.begin(),ans.end(),compare);
    return ans;
}
